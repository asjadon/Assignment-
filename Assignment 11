//Assume that a bank maintains two kinds of accounts for customers, one called as savings account and the other as current account. The savings account provides compound interest and withdrawal facilities but no cheque book facility. The current account provides cheque book facility but no interest. Current account holders should also maintain a minimum balance and if the balance falls below this level, a service charge is imposed. Create a class account that stores customer name, account number and type of account. From this derive the classes curacct and savacct to make them more specific to their requirements. Include necessary member functions in order to achieve the following tasks:
a. Accept deposit from a costumer and update the balance.
b. Display the balance
c. Compute and deposit interest.
d. Permit withdrawal and update the balance.
e. Check for the minimum balance, impose penalty, necessary and update balance.

#include <iostream>
#include <string>

using namespace std;

class Account {
protected:
    string customerName;
    long accountNumber;
    char accountType;
    double balance;

public:
    // Constructor
    Account(string name, long accNum, char type, double bal)
        : customerName(name), accountNumber(accNum), accountType(type), balance(bal) {}

    // Accept deposit
    void deposit(double amount) {
        balance += amount;
        cout << "Deposit of " << amount << " successfully made. Current balance: " << balance << endl;
    }

    // Display balance
    void displayBalance() {
        cout << "Current balance: " << balance << endl;
    }

    // Virtual function for computing interest
    virtual void computeInterest() = 0;

    // Virtual function for withdrawal
    virtual void withdraw(double amount) = 0;

    // Virtual function for checking minimum balance and imposing penalty
    virtual void checkMinimumBalance() = 0;
};

class SavingsAccount : public Account {
public:
    // Constructor
    SavingsAccount(string name, long accNum, char type, double bal)
        : Account(name, accNum, type, bal) {}

    // Compute interest
    void computeInterest() override {
        double interestRate = 0.05; // Assuming 5% interest rate
        double interest = balance * interestRate;
        balance += interest;
        cout << "Interest of " << interest << " added. Current balance: " << balance << endl;
    }

    // Withdrawal
    void withdraw(double amount) override {
        if (balance >= amount) {
            balance -= amount;
            cout << "Withdrawal of " << amount << " successful. Current balance: " << balance << endl;
        } else {
            cout << "Insufficient funds for withdrawal." << endl;
        }
    }

    // Check minimum balance
    void checkMinimumBalance() override {
        const double minimumBalance = 1000.0; // Assuming minimum balance requirement of $1000
        const double penalty = 50.0; // Assuming penalty for not maintaining minimum balance is $50

        if (balance < minimumBalance) {
            cout << "Balance below minimum. Penalty imposed." << endl;
            balance -= penalty;
            cout << "Updated balance after penalty: " << balance << endl;
        }
    }
};

class CurrentAccount : public Account {
public:
    // Constructor
    CurrentAccount(string name, long accNum, char type, double bal)
        : Account(name, accNum, type, bal) {}

    // Compute interest (not applicable for current account)
    void computeInterest() override {
        cout << "No interest for current account." << endl;
    }

    // Withdrawal
    void withdraw(double amount) override {
        if (balance - amount >= 0) {
            balance -= amount;
            cout << "Withdrawal of " << amount << " successful. Current balance: " << balance << endl;
        } else {
            cout << "Insufficient funds for withdrawal." << endl;
        }
    }

    // Check minimum balance and impose penalty if necessary
    void checkMinimumBalance() override {
        const double minimumBalance = 500.0; // Assuming minimum balance requirement of $500
        const double penalty = 100.0; // Assuming penalty for not maintaining minimum balance is $100

        if (balance < minimumBalance) {
            cout << "Balance below minimum. Penalty imposed." << endl;
            balance -= penalty;
            cout << "Updated balance after penalty: " << balance << endl;
        }
    }
};

int main() {
    // Example usage
    SavingsAccount savings("John Doe", 123456789, 'S', 2000);
    CurrentAccount current("Jane Smith", 987654321, 'C', 1500);

    cout << "Savings Account Balance: ";
    savings.displayBalance();
    savings.deposit(500);
    savings.computeInterest();
    savings.checkMinimumBalance();
    savings.withdraw(1000);
    cout << endl;

    cout << "Current Account Balance: ";
    current.displayBalance();
    current.deposit(200);
    current.checkMinimumBalance();
    current.withdraw(1800);
    current.displayBalance();

    return 0;
}
