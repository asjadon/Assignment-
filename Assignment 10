//Design a C++ Class ‘Complex’ with data members for real and imaginary part. Provide default and
parameterized constructors. Write a program to perform arithmetic operations of two complex numbers
using operator overloading (using either member functions or friend functions).

#include <iostream>

class Complex {
private:
    double real;
    double imaginary;

public:
    // Default constructor
    Complex() : real(0), imaginary(0) {}

    // Parameterized constructor
    Complex(double r, double i) : real(r), imaginary(i) {}

    // Addition operator overloading
    Complex operator+(const Complex& other) const {
        Complex result;
        result.real = real + other.real;
        result.imaginary = imaginary + other.imaginary;
        return result;
    }

    // Subtraction operator overloading
    Complex operator-(const Complex& other) const {
        Complex result;
        result.real = real - other.real;
        result.imaginary = imaginary - other.imaginary;
        return result;
    }

    // Multiplication operator overloading
    Complex operator*(const Complex& other) const {
        Complex result;
        result.real = (real * other.real) - (imaginary * other.imaginary);
        result.imaginary = (real * other.imaginary) + (imaginary * other.real);
        return result;
    }

    // Output stream operator overloading
    friend std::ostream& operator<<(std::ostream& os, const Complex& complex) {
        os << complex.real;
        if (complex.imaginary >= 0)
            os << " + " << complex.imaginary << "i";
        else
            os << " - " << -complex.imaginary << "i";
        return os;
    }
};

int main() {
    // Example usage
    Complex c1(2, 3);
    Complex c2(4, -5);

    // Addition
    Complex sum = c1 + c2;
    std::cout << "Sum: " << sum << std::endl;

    // Subtraction
    Complex diff = c1 - c2;
    std::cout << "Difference: " << diff << std::endl;

    // Multiplication
    Complex product = c1 * c2;
    std::cout << "Product: " << product << std::endl;

    return 0;
}
