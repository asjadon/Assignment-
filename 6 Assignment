//Create two classes DM and DB which store the value of distances. DM stores distances in meters and centimeters and DB in feet and inches. Write a program that can read values for the class objects and odd one object of DM with another object of DB.
Use a friend function to carry out the addition operation. The object that stores the results may be a DM object or DB object, depending on the units in which the result are required. The display should be in the format of feet and inches or meters and centimeters depending on the object on display.

#include <iostream>

class DB; // Forward declaration

class DM {
private:
    int meters;
    int centimeters;

public:
    DM(int m = 0, int cm = 0) : meters(m), centimeters(cm) {}

    void display() {
        std::cout << "Distance: " << meters << " meters " << centimeters << " centimeters" << std::endl;
    }

    friend DM addDistance(const DM&, const DB&);
};

class DB {
private:
    int feet;
    int inches;

public:
    DB(int ft = 0, int in = 0) : feet(ft), inches(in) {}

    void display() {
        std::cout << "Distance: " << feet << " feet " << inches << " inches" << std::endl;
    }

    friend DM addDistance(const DM&, const DB&);
};

DM addDistance(const DM& dm, const DB& db) {
    int totalMeters = dm.meters + db.feet * 0.3048;
    int totalCentimeters = dm.centimeters + db.inches * 2.54;
    
    totalMeters += totalCentimeters / 100;
    totalCentimeters %= 100;

    return DM(totalMeters, totalCentimeters);
}

int main() {
    DM dm(5, 20); // 5 meters 20 centimeters
    DB db(15, 6); // 15 feet 6 inches

    std::cout << "DM Object:" << std::endl;
    dm.display();
    std::cout << "DB Object:" << std::endl;
    db.display();

    DM result = addDistance(dm, db);
    std::cout << "Result Object:" << std::endl;
    result.display();

    return 0;
}
