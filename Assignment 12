//Create a base class shape. Use this class to store two double type values that could be area of figures. Derive two specific classes called triangle and rectangle from the base shape. Add to the base a member function getdata() to initialize base class data member and another member function display_area() to compute and display the area of figures. Make display_area() as a virtual function and redefine it the derived class to suit their requirements.

#include <iostream>
#include <cmath>

class Shape {
protected:
    double side1;
    double side2;

public:
    // Constructor
    Shape(double s1 = 0.0, double s2 = 0.0) : side1(s1), side2(s2) {}

    // Member function to initialize base class data members
    void getData(double s1, double s2) {
        side1 = s1;
        side2 = s2;
    }

    // Virtual member function to compute and display area
    virtual void displayArea() {
        std::cout << "Area is: " << side1 * side2 << std::endl;
    }
};

class Rectangle : public Shape {
public:
    // Constructor
    Rectangle(double length = 0.0, double width = 0.0) : Shape(length, width) {}

    // Redefinition of displayArea for rectangle
    void displayArea() override {
        std::cout << "Area of rectangle is: " << side1 * side2 << std::endl;
    }
};

class Triangle : public Shape {
public:
    // Constructor
    Triangle(double base = 0.0, double height = 0.0) : Shape(base, height) {}

    // Redefinition of displayArea for triangle
    void displayArea() override {
        double area = 0.5 * side1 * side2;
        std::cout << "Area of triangle is: " << area << std::endl;
    }
};

int main() {
    Rectangle rectangle(5.0, 4.0);
    Triangle triangle(3.0, 6.0);

    rectangle.displayArea(); // Calls Rectangle's displayArea
    triangle.displayArea();  // Calls Triangle's displayArea

    return 0;
}
